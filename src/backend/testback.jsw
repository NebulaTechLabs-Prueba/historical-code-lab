import { getSecret } from 'wix-secrets-backend';

/**
 * Devuelve la API Key almacenada en Wix Secrets Manager bajo el nombre 'MapNebulaKey'.
 * Llama esta función desde el frontend usando:
 * import { obtenerApiKey } from 'backend/testback';
 */
export async function obtenerApiKey() {
  const apiKey = await getSecret('MapNebulaKey');
  return apiKey;
}
// backend/test.jsw
export function saludarDesdeBackend() {
  return "Saludos desde el backend J S W!";
}

export async function obtenerRutaDesdeUbicacion(origen, destino, waypoints) {
  const apiKey = await getSecret("MapNebulaKey");
  
  const region = 've'; // Código de país para Venezuela
  let url = `https://maps.googleapis.com/maps/api/directions/json?origin=${origen}&destination=${destino}&region=${region}&key=${apiKey}`;

  // Añadir los waypoints a la URL si se proporcionaron
  if (waypoints) {
    // Pedimos a la API que optimice el orden de las paradas para la ruta más eficiente
    url += `&waypoints=optimize:true|${waypoints}`;
  }

  const response = await fetch(url);
  if (!response.ok) {
    throw new Error("Error al obtener la ruta desde Google Maps");
  }

  const data = await response.json();
  
  if (data.routes && data.routes.length > 0) {
    const route = data.routes[0];
    
    // Si hay múltiples paradas (legs), debemos sumar las distancias y duraciones
    let totalDistance = 0;
    let totalDuration = 0;
    route.legs.forEach(leg => {
      totalDistance += leg.distance.value;
      totalDuration += leg.duration.value;
    });

    // Formatear los totales para mostrarlos al usuario
    const formattedDistance = `${(totalDistance / 1000).toFixed(1)} km`;
    const formattedDuration = `${Math.round(totalDuration / 60)} mins`;

    return {
      polyline: route.overview_polyline.points,
      distance: { text: formattedDistance, value: totalDistance },
      duration: { text: formattedDuration, value: totalDuration },
      // La ubicación final es el final del último tramo
      end_location: route.legs[route.legs.length - 1].end_location,
    };
  } else {
    return null; // O manejar el caso de que no se encuentren rutas
  }
}

/**
 * Obtiene una dirección de calle legible a partir de coordenadas.
 * @param {number} lat - Latitud
 * @param {number} lng - Longitud
 * @returns {Promise<string>} La dirección formateada.
 */
export async function obtenerDireccionDesdeCoords(lat, lng) {
  const apiKey = await getSecret("MapNebulaKey");
  const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${apiKey}`;

  const response = await fetch(url);
  if (!response.ok) {
    throw new Error("Error al obtener la dirección desde Google Maps Geocoding API");
  }

  const data = await response.json();
  if (data.results && data.results.length > 0) {
    // Devuelve la primera dirección formateada, que suele ser la más precisa.
    return data.results[0].formatted_address;
  } else {
    return "No se encontró la dirección";
  }
}

